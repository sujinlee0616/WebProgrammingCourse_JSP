package com.sist.dao;
import java.util.*;
import java.sql.*;

public class BoardDAO {
	private Connection conn;
	private PreparedStatement ps;
	private final String URL="jdbc:oracle:thin:@localhost:1521:XE";
	
	// 드라이버 등록
	public BoardDAO()
	{
		try 
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} 
		catch (Exception ex) 
		{
			ex.printStackTrace();
		}
	}
	
	// 연결
	public void getConnection()
	{
		try 
		{
			conn=DriverManager.getConnection(URL, "hr", "happy");
		} catch (Exception ex) {}
	}
	
	// 연결해제 
	public void disConnection()
	{
		try 
		{
			if(ps!=null) ps.close();
			if(conn!=null) conn.close();
		} catch (Exception ex) {}
	}
	
	// 기능 => 목록 출력 
	public List<BoardVO> boardListData(int page) 
	{
		List<BoardVO> list = new ArrayList<BoardVO>();
		
		try 
		{
			getConnection();
			String sql="SELECT no,subject,name,regdate,hit,group_tab,num "
					+ "FROM (SELECT no,subject,name,regdate,hit,group_tab,rownum as num "
					+ "FROM (SELECT no,subject,name,regdate,hit,group_tab "
					+ "FROM replyBoard ORDER BY group_id DESC, group_step ASC)) "
					+ "WHERE num BETWEEN ? AND ?";
			// ※ rownum은 중간에서부터 잘라낼 수 없다 (Top-N) ==> 인라인뷰 사용
			// ※ rownum은 1번부터 시작
			
			int rowSize=10;
			//int start=(rowSize*page) - (rowSize-1);
			int start=rowSize*(page-1)+1;
			int end=rowSize*page;
			
			// 전송
			ps=conn.prepareStatement(sql);
			ps.setInt(1, start);
			ps.setInt(2, end);
			
			ResultSet rs=ps.executeQuery();
			
			while(rs.next())
			{
				BoardVO vo=new BoardVO();
				vo.setNo(rs.getInt(1));
				vo.setSubject(rs.getString(2));
				vo.setName(rs.getString(3));
				vo.setRegdate(rs.getDate(4));
				vo.setHit(rs.getInt(5));
				vo.setGroup_tab(rs.getInt(6));
				 
				list.add(vo);
			}
			rs.close();
			
		} 
		catch (Exception ex) 
		{
			ex.printStackTrace();
		}
		finally
		{
			disConnection();
		}
		
		return list; // ArrayList가 아니라 상위 클래스인 List 쓰는게 낫다
		// 왜냐면 List가 ArrayList, Vector, LinkedList의 상위 클래스이니까 다 포괄하고 있어서.
	}
	
	public int boardRowCount()
	{
		int count=0;
		try 
		{
			getConnection();
			String sql="SELECT COUNT(*) FROM replyBoard";
			ps=conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			rs.next();
			count=rs.getInt(1);
			rs.close();
		} 
		catch (Exception ex) {
			ex.printStackTrace();
		}
		finally
		{
			disConnection();
		}
		return count;
	}
	
	// 제네릭스 사용 이유 
	// https://wikidocs.net/268
	
	
	// 새 글 작성 후 새 글을 테이블에 삽입
	public void boardInsert(BoardVO vo)
	{
		try {
			getConnection();
			String sql="INSERT INTO replyBoard(no,name,subject,content,pwd,group_id) VALUES("  // 이 외의 컬럼은 디폴트값 들어가므로 지정 안 해줘도 됨 
					+ "rb_no_seq.nextval,?,?,?,?,(SELECT NVL(MAX(group_id)+1,1) FROM replyBoard))";   // group_id는 기존 group_id의 max값보다 1 크게. 
			ps=conn.prepareStatement(sql);
			ps.setString(1, vo.getName());
			ps.setString(2, vo.getSubject());
			ps.setString(3, vo.getContent());
			ps.setString(4, vo.getPwd());
			
			ps.executeUpdate();  // 실행요청 (INSERT니까 executeUpdate)
			
		} 
		catch (Exception ex) 
		{
			ex.printStackTrace();
		}
		finally
		{
			disConnection();
		}
	}
	
	// 내용보기(조회수 증가)(type=0) & 수정하기 (데이터 읽기)(type=1) 
	public BoardVO boardDetailData(int no,int type)
	{
		BoardVO vo = new BoardVO();
		try 
		{
			getConnection();
			String sql="";
			
			// 조회수 증가 
			if(type==0)
			{
				sql="UPDATE replyBoard SET "
						+ "hit=hit+1 "
						+ "WHERE no=?";
				ps=conn.prepareStatement(sql);
				ps.setInt(1, no);
				ps.executeUpdate();
				ps.close();
			}
			// 상세보기, 수정하기 (데이터를 읽는다) 
			sql="SELECT no,name,subject,content,regdate,hit "
					+ "FROM replyBoard "
					+ "WHERE no=?";
			ps=conn.prepareStatement(sql);
			ps.setInt(1, no);
			// 데이터를 읽기 시작
			ResultSet rs=ps.executeQuery();
			rs.next();
			
			// VO에 값을 저장
			vo.setNo(rs.getInt(1));
			vo.setName(rs.getString(2));
			vo.setSubject(rs.getString(3));
			vo.setContent(rs.getString(4));
			vo.setRegdate(rs.getDate(5));
			vo.setHit(rs.getInt(6));
			rs.close();
		} 
		catch (Exception ex) {
			ex.printStackTrace();
		}
		finally
		{
			disConnection();
		}
		return vo;
	}
	
	// 수정
	public boolean boardUpdate(BoardVO vo)
	{
		// 비밀번호 일치여부 체크 
		boolean bCheck=false;
		
		try {
			getConnection();
			String sql="SELECT pwd FROM replyBoard "
					+ "WHERE no=?";
			ps=conn.prepareStatement(sql);
			// ?에 값을 채운다
			ps.setInt(1, vo.getNo());
			ResultSet rs = ps.executeQuery();
			rs.next();
			String db_pwd=rs.getString(1);
			rs.close();
			
			// 비밀번호가 같다면 
			if(db_pwd.equals(vo.getPwd()))
			{
				bCheck=true;
				sql="UPDATE replyBoard SET "
						+ "name=?,subject=?,content=? "
						+ "WHERE no=?";
				ps=conn.prepareStatement(sql);
				// ?에 값 채운다
				ps.setString(1, vo.getName());
				ps.setString(2, vo.getSubject());
				ps.setString(3, vo.getContent());
				ps.setInt(4, vo.getNo());
				
				// 실행
				ps.executeUpdate(); // commit
			}
			// 비밀번호가 틀리다면 
			else{
				bCheck=false;
			}
		} 
		catch (Exception ex) 
		{
			ex.printStackTrace();
		}
		finally {
			disConnection();
		}
		
		return bCheck;		 
	}
	
	// 삭제
	
	// 답변하기
	public void ReplyInsert(int pno, BoardVO vo)
	{
		try
		{
			getConnection();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		finally
		{
			disConnection();
		}
	}
	
	
}







