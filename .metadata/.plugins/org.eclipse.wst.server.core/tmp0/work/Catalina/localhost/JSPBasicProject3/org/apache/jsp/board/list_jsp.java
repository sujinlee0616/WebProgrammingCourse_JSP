/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2020-03-11 07:11:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.*;
import com.sist.dao.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.sist.dao");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 목록출력 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");

	BoardDAO dao = new BoardDAO();
	// 사용자가 요청한 페이지를 받는다 
	String strPage=request.getParameter("page");  // 사용자가 보내줬으니까 request 안에 싣어져 있음 (사용자가 보낸 모든 값은 request 안에 有...)
	
	if(strPage==null){
		strPage="1";
	}
	
	int curpage=Integer.parseInt(strPage);
	
	List<BoardVO> list = dao.boardListData(curpage);
	
	int count=dao.boardRowCount();
	int totalpage = (int)(Math.ceil(count/10.0));
	
	count = count-((curpage*10)-10);
	/* 다음 페이지 넘어갈 때마다 10씩 빼야 하니까... */
	/* ex) 전체 게시물 14개, 1페이지당 게시물 10개라면 ==> 1페이지: no 14~5,  2페이지: no 4~1 */
	
	

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/bootstrap.min.css\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".row{\r\n");
      out.write("\tmargin: 0 auto;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("}\r\n");
      out.write("h2 {\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<h2>묻고 답하기 (답변형 게시판)</h2>\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t<table class=\"table\">\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><a href=\"insert.jsp\" class=\"btn btn-sm btn-default\">새 글</a></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t<table class=\"table table-striped\">\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th width=10% class=\"text-center\">번호</th>\r\n");
      out.write("\t\t\t\t\t<th width=45% class=\"text-center\">제목</th>\r\n");
      out.write("\t\t\t\t\t<th width=15% class=\"text-center\">이름</th>\r\n");
      out.write("\t\t\t\t\t<th width=20% class=\"text-center\">작성일</th>\r\n");
      out.write("\t\t\t\t\t<th width=15% class=\"text-center\">조회수</th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

					for(BoardVO vo:list)
					{
				
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td width=10% class=\"text-center\">");
      out.print(count-- );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td width=45% class=\"text-left\">\r\n");
      out.write("\t\t\t\t\t\t");

							if(vo.getGroup_tab()>0) // group_tab이 1 이상이면 간격 띄워주고 답변 이미지 달아줘야
							{ 
								for(int i=0;i<vo.getGroup_tab();i++) // tab 값 만큼 간격 반복해서 줌 
								{
									out.println("&nbsp;&nbsp;&nbsp;");
								}
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<img src=\"icon_reply.gif\">\r\n");
      out.write("\t\t\t\t\t\t");

								
							}
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");

							String msg="관리자가 삭제한 게시물입니다.";
							if(msg.equals(vo.getSubject()))
							{
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<span style=\"color: #999999;\">");
      out.print(vo.getSubject() );
      out.write("</span>\r\n");
      out.write("\t\t\t\t\t\t");

							}

							else
							{
								//
							
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<a href=\"detail.jsp?no=");
      out.print(vo.getNo());
      out.write("&page=");
      out.print(curpage);
      out.write('"');
      out.write('>');
      out.print(vo.getSubject() );
      out.write("</a>\r\n");
      out.write("\t\t\t\t\t\t\t");

								String today=new SimpleDateFormat("yyyy-MM-dd").format(new Date()); // 오늘 날짜를 yyyy-MM-dd 형식으로 바꿔라
								if(today.equals(vo.getRegdate().toString()))
								{
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<sup><img src=\"new.gif\"></sup>\r\n");
      out.write("\t\t\t\t\t\t\t");

								}
							}
						
      out.write("\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t<td width=15% class=\"text-center\">");
      out.print(vo.getName() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td width=20% class=\"text-center\">");
      out.print(vo.getRegdate() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td width=15% class=\"text-center\">");
      out.print(vo.getHit() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t<table class=\"table\">\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td class=\"text-center\">\r\n");
      out.write("\t\t\t\t\t\t<a href=\"list.jsp?page=");
      out.print(curpage>1?curpage-1:curpage );
      out.write("\" class=\"btn btn-sm btn-default\">이전</a>\r\n");
      out.write("\t\t\t\t\t\t\t");
      out.print(curpage );
      out.write(" page / ");
      out.print(totalpage );
      out.write(" pages\r\n");
      out.write("\t\t\t\t\t\t<a href=\"list.jsp?page=");
      out.print(curpage<totalpage?curpage+1:curpage );
      out.write("\" class=\"btn btn-sm btn-default\">다음</a>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
