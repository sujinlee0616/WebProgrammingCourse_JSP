/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2020-03-10 02:53:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.object;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class request_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- \r\n");
      out.write("\t<JavaScript Core>\r\n");
      out.write("\t1. 데이터형\r\n");
      out.write("\t\tvar : 자동 지정 변수.\r\n");
      out.write("\t\t1) 형이 자동으로 지정된다.  \r\n");
      out.write("\t\t\tvar a=1; ==> a:int \r\n");
      out.write("\t\t\tvar a=10.5; ==> a:double\r\n");
      out.write("\t\t\tvar a='Hello, world!'; ==> a:String\r\n");
      out.write("\t\t\tvar a=\"Hello, world!\"; ==> a:String\r\n");
      out.write("\t\t\tvar a=['a', 123, 10.5, {}]; ==> a: Array\r\n");
      out.write("\t\t\tvar a={} ==> a: Object \r\n");
      out.write("\t\t\t======================\r\n");
      out.write("\t\t2) scope \r\n");
      out.write("\t\t - var는 사용범위가 명확하지 않다. ==> let, const(상수형 변수) 출현.  \r\n");
      out.write("\t\t   var: 변수 재선언 가능. 함수 레벨 스코프. \r\n");
      out.write("\t\t   let: 변수 재선언 불가. 재할당 가능. 블록 레벨 스코프.  \r\n");
      out.write("\t\t   const: 변수 재선언 불가. 재할당 불가(상수형이니까!). 블록 레벨 스코프.  \r\n");
      out.write("\t2. 연산자\r\n");
      out.write("\t\t1) 산술연산자 (+, -, *, /) \r\n");
      out.write("\t\t2) 비교연산자 (==, !=, <, >, <=, >=)\r\n");
      out.write("\t\t3) 논리연산자 (&&, ||) \r\n");
      out.write("\t\t4) 대입연산자 (=, +=, -=) \r\n");
      out.write("\t3. 제어문\r\n");
      out.write("\t\tif, if~else, for, while, do~while, switch\r\n");
      out.write("\t\tfor in, forEach\r\n");
      out.write("\t\t※참고 - for in\r\n");
      out.write("\t\tfor (변수 in 객체){\r\n");
      out.write("    \t\t....\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t※참고 - forEach\r\n");
      out.write("\t\t: \r\n");
      out.write("\t4. 함수\r\n");
      out.write("\t\t1) 형식 \r\n");
      out.write("\t\t\tfunction 함수명()  <== 매개변수는 'var addr'과 같이 쓰지X. 그냥 'addr'.\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\t....\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t2) 변수에 함수를 할당 가능 \r\n");
      out.write("\t\t\tvar a = function(){\r\n");
      out.write("\t\t\t\t.....\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t3) 람다식: 권장사항임!! => 는 함수가 생략됐다고 생각하면 됨. \r\n");
      out.write("\t\t\tvar func=()=> {\r\n");
      out.write("\t\t\t\t....\r\n");
      out.write("\t\t\t} \t\t\t\r\n");
      out.write("\t5. 객체 구조 \r\n");
      out.write("\t\t- window > document > form \r\n");
      out.write("\t\t   상위 ================== 하위\r\n");
      out.write("\t\t1) window: 브라우저. ex) window.open()\r\n");
      out.write("\t\t2) document\r\n");
      out.write("\t\t3) form\r\n");
      out.write("\t\t4) location\r\n");
      out.write("\t\t5) history: 이전 => back(), forward(), go()\r\n");
      out.write("\t\t   - history.go(): 특정 페이지로\r\n");
      out.write("\t\t   \t\tex) history.go(0): 현재 페이지로\r\n");
      out.write("\t\t   \t\t\thistory.go(-1): 이전 페이지로 \r\n");
      out.write("\t\t   \t\t\thistory.go(-2): 두 단계 전 페이지로\r\n");
      out.write("\t\t   \t\t\thistory.go(1): 다음 페이지로 \r\n");
      out.write("\t\t   - history.back(): 이전 페이지로  \r\n");
      out.write("\t\t   - history.forward(): 다음 페이지로\r\n");
      out.write("\t6. 사용자 정의 함수   \r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("<!-- <script type=\"text/javascript\">\r\n");
      out.write("function send(){\r\n");
      out.write("\tvar user_name=window.document.frm.user_name.value; //form의 name값을 사용하여 객체에 접근 \r\n");
      out.write("\tif(user_name.trim()==\"\")\r\n");
      out.write("\t{\r\n");
      out.write("\t\talert(\"이름을 입력하세요\");\r\n");
      out.write("\t\tdocument.frm.user_name.focus();\r\n");
      out.write("\t\treturn; // 이 밑에 문장이 실행되지 않아야 하므로.\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tvar content=document.frm.content.value;\r\n");
      out.write("\tif(content.trim()==\"\")\r\n");
      out.write("\t{\r\n");
      out.write("\t\talert(\"소개를 입력하세요\");\r\n");
      out.write("\t\tdocument.frm.content.focus();\r\n");
      out.write("\t\treturn; // 이 밑에 문장이 실행되지 않아야 하므로.\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tdocument.frm.submit();\r\n");
      out.write("}\r\n");
      out.write("</script> -->\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("// $는 'window.onload'를 의미한다. \r\n");
      out.write("// $는 document.getElementById 또는 document.getElementByClassName을 의미한다. \r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$('#btn').click(function(){\r\n");
      out.write("\t\tvar user_name=$('#user_name').val();\r\n");
      out.write("\t\tif(user_name.trim()==\"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"이름을 입력하세요\");\r\n");
      out.write("\t\t\t$('#user_name').focus();\r\n");
      out.write("\t\t\treturn; // 이 밑에 문장이 실행되지 않아야 하므로.\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar content=$('#content').val();\r\n");
      out.write("\t\tif(content.trim()==\"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"소개를 입력하세요\");\r\n");
      out.write("\t\t\t$('#content').focus();\r\n");
      out.write("\t\t\treturn; // 이 밑에 문장이 실행되지 않아야 하므로.\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$('#frm').submit();\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<center>\r\n");
      out.write("\t\t<h1>개인정보</h1>\r\n");
      out.write("\t\t<form method=post action=\"request_ok.jsp\" name=frm>\r\n");
      out.write("\t\t\t<table border=1 width=450>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th width=20%>이름</th>\r\n");
      out.write("\t\t\t\t\t<td width=80%><input type=text name=user_name size=15 id=user_name></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th width=20%>성별</th>\r\n");
      out.write("\t\t\t\t\t<td width=80%>\r\n");
      out.write("\t\t\t\t\t\t<input type=radio name=sex value=\"남자\" checked>남자\r\n");
      out.write("\t\t\t\t\t\t<input type=radio name=sex value=\"여자\">여자\r\n");
      out.write("\t\t\t\t\t\t<!-- name이 동일해야. value값이 넘어간다. -->\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th width=20%>전화</th>\r\n");
      out.write("\t\t\t\t\t<td width=80%>\r\n");
      out.write("\t\t\t\t\t\t<select name=\"tel1\">\r\n");
      out.write("\t\t\t\t\t\t\t<option>02</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option>031</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option>032</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option>041</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option>042</option>\r\n");
      out.write("\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th width=20%>취미</th>\r\n");
      out.write("\t\t\t\t\t<td width=80%>\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"운동\">운동\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"낚시\">낚시\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"게임\">게임\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"독서\">독서\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"등산\">등산\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th width=20%>소개</th>\r\n");
      out.write("\t\t\t\t\t<td width=80%>\r\n");
      out.write("\t\t\t\t\t\t<textarea rows=\"5\" cols=\"35\" name=\"content\" id=content></textarea>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td colspan=\"2\" align=\"center\">\r\n");
      out.write("\t\t\t\t\t\t<!-- <input type=button value=전송 onclick=\"send()\"> -->\r\n");
      out.write("\t\t\t\t\t\t<input type=button value=전송 id=\"btn\">\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
